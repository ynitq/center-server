
# ===============================
# = 代码生成工具
# ===============================

# # 基础包名，所有的java文件的基础包名，每个模块自行添加后缀
# codeGen.basePackage = com.linzi.xxx
codeGen.basePackage=com.linzi.monitor
 
# 源码的路径，生成时如果发现文件已经存在，不会覆盖原来的文件，但entity文件除外，一定被覆盖
# codeGen.output.java = src/main/java
# codeGen.output.other = src/main/webapp
codeGen.output.save = true
codeGen.output.override = true
 
# 生成出来的代码可作为样板文件，自己手动拷贝，下面配置是样板文件存放路径默认值
# codeGen.sample.java = codeGen/java
# codeGen.sample.other = codeGen/others
# codeGen.sample.save = true
# codeGeb.sample.override = true

# 启动时，自动运行 
codeGen.autorun.entity = true
codeGen.autorun.fileset1 = false
#codeGen.autorun.templateDir = true

 
# 生成entity文件时的配置
codeGen.entity.entityPackage=entity
# codeGen.entity.template = template/codeGen/entity.ftl
 

# 指定entity对象的接口，默认都只有Serializable接口，可自定义需要增加什么接口
# codeGen.entity.implement[0]=com.linzi.app.appserver.entity.server.IBasePo
# 
# 数据库表名和java类名的对照表
# codeGen.entity.tableNameMap.newses = News
 
# 可自定义模板的目录，如果文件名带有“__javaClassName__”或者 "__otherFileName__"字样的，
# 将按数据库的表，循环生成所有的文件。
# codeGen.templateDir[0] = template/codeGen/fileset2/java
# codeGen.templateDir[1] = template/codeGen/fileset2/other